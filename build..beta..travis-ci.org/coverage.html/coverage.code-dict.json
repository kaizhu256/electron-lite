{"/home/travis/build/kaizhu256/node-electron-lite/test.js":"/* istanbul instrument in package electron */\n/* jslint-utility2 */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 4,\n    maxlen: 100,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init isBrowser\n        local.isBrowser = typeof window === \"object\" &&\n            typeof window.XMLHttpRequest === \"function\" &&\n            window.document &&\n            typeof window.document.querySelectorAll === \"function\";\n        // init global\n        local.global = local.isBrowser\n            ? window\n            : global;\n        // re-init local\n        local = local.global.local = (local.global.utility2 ||\n            require('utility2')).requireReadme();\n        // init test\n        local.testRunDefault(local);\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        /* istanbul ignore next */\n        local.testCase_buildApidoc_default = function (options, onError) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            if (local.isBrowser) {\n                onError(null, options);\n                return;\n            }\n            try {\n                local.electron = require('electron');\n            } catch (errorCaught) {\n                onError(null, options);\n                return;\n            }\n            if (process.env.npm_config_mode_test_case === 'testCase_buildApidoc_default') {\n                local.electron.NativeImage = local.electron.nativeImage.createEmpty().constructor;\n                local.electron.WebContents = local.electron.webContents.create().constructor;\n            }\n            options = { moduleDict: { electron: local.electron } };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = function (options, onError) {\n        /*\n         * this function will test buildApp's default handling-behavior\n         */\n            if (local.isBrowser) {\n                onError(null, options);\n                return;\n            }\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            onError(null, options);\n        };\n\n        local.testCase_exampleJs_exit = function (options, onError) {\n        /*\n         * this function will test example.js's exit handling-behavior\n         */\n            if (local.isBrowser) {\n                onError(null, options);\n                return;\n            }\n            options = process.exit;\n            process.exit = function () {\n                process.exit = options;\n                onError(null, options);\n            };\n        };\n    }());\n}());\n","/home/travis/build/kaizhu256/node-electron-lite/lib.electron.js":"// usr/bin/env node\n/*\n * lib.electron.js (2018.9.8)\n * https://github.com/kaizhu256/node-electron-lite\n * this zero-dependency package will download and install the electron (v2.0.8) prebuilt-binary from https://github.com/electron/electron/releases\n *\n */\n\n\n\n/* istanbul instrument in package electron */\n/* jslint-utility2 */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 4,\n    maxlen: 100,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    /* istanbul ignore next */\n    (function () {\n        // init debug_inline\n        (function () {\n            var consoleError, context, key;\n            consoleError = console.error;\n            context = (typeof window === 'object' && window) || global;\n            key = 'debug_inline'.replace('_i', 'I');\n            context[key] = context[key] || function (arg0) {\n            /*\n             * this function will both print arg0 to stderr and return it\n             */\n                // debug arguments\n                context['_' + key + 'Arguments'] = arguments;\n                consoleError('\\n\\n' + key);\n                consoleError.apply(console, arguments);\n                consoleError(new Error().stack + '\\n');\n                // return arg0 for inspection\n                return arg0;\n            };\n        }());\n        // init local\n        local = {};\n        // init isBrowser\n        local.isBrowser = typeof window === 'object' &&\n            typeof window.XMLHttpRequest === 'function' &&\n            window.document &&\n            typeof window.document.querySelectorAll === 'function';\n        // init global\n        local.global = local.isBrowser\n            ? window\n            : global;\n        // re-init local\n        local = local.global.utility2_rollup ||\n            // local.global.utility2_rollup_old || require('./assets.utility2.rollup.js') ||\n            local;\n        // init exports\n        if (local.isBrowser) {\n            local.global.utility2_electron = local;\n        } else {\n            // require builtins\n            // local.assert = require('assert');\n            local.buffer = require('buffer');\n            local.child_process = require('child_process');\n            local.cluster = require('cluster');\n            local.crypto = require('crypto');\n            local.dgram = require('dgram');\n            local.dns = require('dns');\n            local.domain = require('domain');\n            local.events = require('events');\n            local.fs = require('fs');\n            local.http = require('http');\n            local.https = require('https');\n            local.net = require('net');\n            local.os = require('os');\n            local.path = require('path');\n            local.querystring = require('querystring');\n            local.readline = require('readline');\n            local.repl = require('repl');\n            local.stream = require('stream');\n            local.string_decoder = require('string_decoder');\n            local.timers = require('timers');\n            local.tls = require('tls');\n            local.tty = require('tty');\n            local.url = require('url');\n            local.util = require('util');\n            local.vm = require('vm');\n            local.zlib = require('zlib');\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n        }\n        // init lib main\n        local.local = local.electron = local;\n\n\n\n        /* validateLineSortedReset */\n        return;\n    }());\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    (function () {\n        // init cli\n        if (local.isBrowser || module !== require.main || process.versions.electron) {\n            return;\n        }\n        local.__filename = (process.platform === 'darwin' &&\n            local.fs.existsSync(__dirname + '/external/Electron.app/Contents/MacOS/Electron')\n            // bug-workaround - darwin does not like symlink\n            ? __dirname + '/external/Electron.app/Contents/MacOS/Electron'\n            : __dirname + '/external/electron');\n        // run electron in child_process\n        local.child = local.child_process.spawn(\n            local.__filename,\n            process.argv.slice(2),\n            { stdio: [0, 'pipe', 2] }\n        );\n        local.child.on('exit', process.exit);\n        local.child.stdout.on('data', function (chunk, encoding, cb) {\n            // bug-workaround - force electron v1.8.x and higher to exit after running command\n            // --help|-h\n            switch (process.argv[2]) {\n            case '--help':\n            case '-h':\n                process.stdout.write(chunk, encoding, cb);\n                local.child.kill();\n                break;\n            default:\n                process.stdout.write(chunk, encoding, cb);\n            }\n        });\n    }());\n}());\n","/home/travis/build/kaizhu256/node-electron-lite/example.js":"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n/*\nexample.js\n\nthis electron script will screenshot the webpage https://electron.atom.io\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install electron-lite && \\\n            printf '{\"main\":\"example.js\",\"name\":\"undefined\",\"version\":\"0.0.1\"}' > \\\n            package.json && \\\n            ./node_modules/.bin/electron . --disable-overlay-scrollbar --enable-logging\n    3. view screenshot /tmp/screenshot.testExampleJs.browser..png\n*/\n\n/* istanbul instrument in package electron */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 4,\n    maxlen: 100,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var options, modeNext, onNext;\n    onNext = function (data) {\n        modeNext += 1;\n        switch (modeNext) {\n        case 1:\n            /* istanbul ignore next */\n            if (process.env.npm_config_mode_auto_restart) {\n                return;\n            }\n            // wait for electron to init\n            try {\n                require('app').on('ready', onNext);\n            } catch (errorCaught) {\n                require('electron').app.once('ready', onNext);\n            }\n            break;\n        case 2:\n            // init options\n            options = { frame: false, height: 768, width: 1024, x: 0, y: 0 };\n            // init browserWindow;\n            try {\n                options.BrowserWindow = require('browser-window');\n            } catch (errorCaught) {\n                options.BrowserWindow = require('electron').BrowserWindow;\n            }\n            options.browserWindow = new options.BrowserWindow(options);\n            // goto next step when webpage is loaded\n            /* istanbul ignore next */\n            try {\n                options.browserWindow.webContents.once('did-stop-loading', onNext);\n            } catch (errorCaught) {\n                setTimeout(onNext, 10000);\n            }\n            // open url\n            (options.browserWindow.loadUrl || options.browserWindow.loadURL).call(\n                options.browserWindow,\n                'https://electron.atom.io'\n            );\n            break;\n        case 3:\n            // screenshot webpage\n            options.browserWindow.capturePage(options, onNext);\n            break;\n        case 4:\n            // screenshot\n            /* istanbul ignore next */\n            try {\n                data = data.toPng();\n            } catch (errorCaught) {\n                try {\n                    data = data.toPNG();\n                } catch (ignore) {\n                }\n            }\n            require('fs').writeFileSync('/tmp/screenshot.testExampleJs.browser..png', data);\n            console.log('created screenshot file /tmp/screenshot.testExampleJs.browser..png');\n            // exit\n            process.exit(0);\n            break;\n        }\n    };\n    modeNext = 0;\n    onNext();\n}());"}