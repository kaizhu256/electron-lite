{"/home/travis/build/kaizhu256/node-electron-lite/test.js":"/* istanbul instrument in package electron */\n/* istanbul ignore next */\n/* jslint utility2:true */\n(function (globalThis) {\n    \"use strict\";\n    var consoleError;\n    var local;\n    // init globalThis\n    (function () {\n        try {\n            globalThis = Function(\"return this\")(); // jslint ignore:line\n        } catch (ignore) {}\n    }());\n    globalThis.globalThis = globalThis;\n    // init debug_inline\n    if (!globalThis[\"debug\\u0049nline\"]) {\n        consoleError = console.error;\n        globalThis[\"debug\\u0049nline\"] = function () {\n        /*\n         * this function will both print <arguments> to stderr\n         * and return <arguments>[0]\n         */\n            var argList;\n            argList = Array.from(arguments); // jslint ignore:line\n            // debug arguments\n            globalThis[\"debug\\u0049nlineArguments\"] = argList;\n            consoleError(\"\\n\\ndebug\\u0049nline\");\n            consoleError.apply(console, argList);\n            consoleError(\"\\n\");\n            // return arg0 for inspection\n            return argList[0];\n        };\n    }\n    // init local\n    local = {};\n    local.local = local;\n    globalThis.globalLocal = local;\n    // init isBrowser\n    local.isBrowser = (\n        typeof window === \"object\"\n        && window === globalThis\n        && typeof window.XMLHttpRequest === \"function\"\n        && window.document\n        && typeof window.document.querySelector === \"function\"\n    );\n    // init function\n    local.assertThrow = function (passed, message) {\n    /*\n     * this function will throw the error <message> if <passed> is falsy\n     */\n        var error;\n        if (passed) {\n            return;\n        }\n        error = (\n            // ternary-condition\n            (\n                message\n                && typeof message.message === \"string\"\n                && typeof message.stack === \"string\"\n            )\n            // if message is an error-object, then leave it as is\n            ? message\n            : new Error(\n                typeof message === \"string\"\n                // if message is a string, then leave it as is\n                ? message\n                // else JSON.stringify message\n                : JSON.stringify(message, null, 4)\n            )\n        );\n        throw error;\n    };\n    local.functionOrNop = function (fnc) {\n    /*\n     * this function will if <fnc> exists,\n     * them return <fnc>,\n     * else return <nop>\n     */\n        return fnc || local.nop;\n    };\n    local.identity = function (value) {\n    /*\n     * this function will return <value>\n     */\n        return value;\n    };\n    local.nop = function () {\n    /*\n     * this function will do nothing\n     */\n        return;\n    };\n    local.objectAssignDefault = function (target, source) {\n    /*\n     * this function will if items from <target> are\n     * null, undefined, or empty-string,\n     * then overwrite them with items from <source>\n     */\n        Object.keys(source).forEach(function (key) {\n            if (\n                target[key] === null\n                || target[key] === undefined\n                || target[key] === \"\"\n            ) {\n                target[key] = target[key] || source[key];\n            }\n        });\n    };\n    // require builtin\n    if (!local.isBrowser) {\n        local.assert = require(\"assert\");\n        local.buffer = require(\"buffer\");\n        local.child_process = require(\"child_process\");\n        local.cluster = require(\"cluster\");\n        local.crypto = require(\"crypto\");\n        local.dgram = require(\"dgram\");\n        local.dns = require(\"dns\");\n        local.domain = require(\"domain\");\n        local.events = require(\"events\");\n        local.fs = require(\"fs\");\n        local.http = require(\"http\");\n        local.https = require(\"https\");\n        local.net = require(\"net\");\n        local.os = require(\"os\");\n        local.path = require(\"path\");\n        local.querystring = require(\"querystring\");\n        local.readline = require(\"readline\");\n        local.repl = require(\"repl\");\n        local.stream = require(\"stream\");\n        local.string_decoder = require(\"string_decoder\");\n        local.timers = require(\"timers\");\n        local.tls = require(\"tls\");\n        local.tty = require(\"tty\");\n        local.url = require(\"url\");\n        local.util = require(\"util\");\n        local.vm = require(\"vm\");\n        local.zlib = require(\"zlib\");\n    }\n}(this));\n\n\n\n(function (local) {\n\"use strict\";\n\n\n\n// run shared js-env code - init-before\n(function () {\n// init local\nlocal = (globalThis.utility2 || require(\"utility2\")).requireReadme();\nglobalThis.local = local;\n// init test\nlocal.testRunDefault(local);\n}());\n\n\n\n// run shared js-env code - function\n(function () {\n/* istanbul ignore next */\nlocal.testCase_buildApidoc_default = function (options, onError) {\n/*\n * this function will test buildApidoc's default handling-behavior-behavior\n */\n    if (local.isBrowser) {\n        onError(null, options);\n        return;\n    }\n    try {\n        local.electron = require(\"electron\");\n    } catch (ignore) {\n        onError(null, options);\n        return;\n    }\n    if (process.env.npm_config_mode_test_case === \"testCase_buildApidoc_default\") {\n        local.electron.NativeImage = local.electron.nativeImage.createEmpty().constructor;\n        local.electron.WebContents = local.electron.webContents.create().constructor;\n    }\n    options = {moduleDict: {electron: local.electron}};\n    local.buildApidoc(options, onError);\n};\n\nlocal.testCase_buildApp_default = function (options, onError) {\n/*\n * this function will test buildApp's default handling-behavior\n */\n    if (local.isBrowser) {\n        onError(null, options);\n        return;\n    }\n    local.testCase_buildReadme_default(options, local.onErrorThrow);\n    local.testCase_buildLib_default(options, local.onErrorThrow);\n    local.testCase_buildTest_default(options, local.onErrorThrow);\n    onError(null, options);\n};\n\nlocal.testCase_exampleJs_exit = function (options, onError) {\n/*\n * this function will test example.js's exit handling-behavior\n */\n    if (local.isBrowser) {\n        onError(null, options);\n        return;\n    }\n    options = process.exit;\n    process.exit = function () {\n        process.exit = options;\n        onError(null, options);\n    };\n};\n}());\n\n\n\n}());\n","/home/travis/build/kaizhu256/node-electron-lite/lib.electron.js":"// usr/bin/env node\n/*\n * lib.electron.js (2018.12.8)\n * https://github.com/kaizhu256/node-electron-lite\n * this zero-dependency package will download and install the electron (v2.0.16) prebuilt-binary from https://github.com/electron/electron/releases\n *\n */\n\n\n\n/* istanbul instrument in package electron */\n/* istanbul ignore next */\n/* jslint utility2:true */\n(function (globalThis) {\n    \"use strict\";\n    var consoleError;\n    var local;\n    // init globalThis\n    (function () {\n        try {\n            globalThis = Function(\"return this\")(); // jslint ignore:line\n        } catch (ignore) {}\n    }());\n    globalThis.globalThis = globalThis;\n    // init debug_inline\n    if (!globalThis[\"debug\\u0049nline\"]) {\n        consoleError = console.error;\n        globalThis[\"debug\\u0049nline\"] = function () {\n        /*\n         * this function will both print <arguments> to stderr\n         * and return <arguments>[0]\n         */\n            var argList;\n            argList = Array.from(arguments); // jslint ignore:line\n            // debug arguments\n            globalThis[\"debug\\u0049nlineArguments\"] = argList;\n            consoleError(\"\\n\\ndebug\\u0049nline\");\n            consoleError.apply(console, argList);\n            consoleError(\"\\n\");\n            // return arg0 for inspection\n            return argList[0];\n        };\n    }\n    // init local\n    local = {};\n    local.local = local;\n    globalThis.globalLocal = local;\n    // init isBrowser\n    local.isBrowser = (\n        typeof window === \"object\"\n        && window === globalThis\n        && typeof window.XMLHttpRequest === \"function\"\n        && window.document\n        && typeof window.document.querySelector === \"function\"\n    );\n    // init function\n    local.assertThrow = function (passed, message) {\n    /*\n     * this function will throw the error <message> if <passed> is falsy\n     */\n        var error;\n        if (passed) {\n            return;\n        }\n        error = (\n            // ternary-condition\n            (\n                message\n                && typeof message.message === \"string\"\n                && typeof message.stack === \"string\"\n            )\n            // if message is an error-object, then leave it as is\n            ? message\n            : new Error(\n                typeof message === \"string\"\n                // if message is a string, then leave it as is\n                ? message\n                // else JSON.stringify message\n                : JSON.stringify(message, null, 4)\n            )\n        );\n        throw error;\n    };\n    local.functionOrNop = function (fnc) {\n    /*\n     * this function will if <fnc> exists,\n     * them return <fnc>,\n     * else return <nop>\n     */\n        return fnc || local.nop;\n    };\n    local.identity = function (value) {\n    /*\n     * this function will return <value>\n     */\n        return value;\n    };\n    local.nop = function () {\n    /*\n     * this function will do nothing\n     */\n        return;\n    };\n    local.objectAssignDefault = function (target, source) {\n    /*\n     * this function will if items from <target> are\n     * null, undefined, or empty-string,\n     * then overwrite them with items from <source>\n     */\n        Object.keys(source).forEach(function (key) {\n            if (\n                target[key] === null\n                || target[key] === undefined\n                || target[key] === \"\"\n            ) {\n                target[key] = target[key] || source[key];\n            }\n        });\n    };\n    // require builtin\n    if (!local.isBrowser) {\n        local.assert = require(\"assert\");\n        local.buffer = require(\"buffer\");\n        local.child_process = require(\"child_process\");\n        local.cluster = require(\"cluster\");\n        local.crypto = require(\"crypto\");\n        local.dgram = require(\"dgram\");\n        local.dns = require(\"dns\");\n        local.domain = require(\"domain\");\n        local.events = require(\"events\");\n        local.fs = require(\"fs\");\n        local.http = require(\"http\");\n        local.https = require(\"https\");\n        local.net = require(\"net\");\n        local.os = require(\"os\");\n        local.path = require(\"path\");\n        local.querystring = require(\"querystring\");\n        local.readline = require(\"readline\");\n        local.repl = require(\"repl\");\n        local.stream = require(\"stream\");\n        local.string_decoder = require(\"string_decoder\");\n        local.timers = require(\"timers\");\n        local.tls = require(\"tls\");\n        local.tty = require(\"tty\");\n        local.url = require(\"url\");\n        local.util = require(\"util\");\n        local.vm = require(\"vm\");\n        local.zlib = require(\"zlib\");\n    }\n}(this));\n\n\n\n(function (local) {\n\"use strict\";\n\n\n\n/* istanbul ignore next */\n// run shared js-env code - init-before\n(function () {\n// init local\nlocal = (\n    globalThis.utility2_rollup\n    // || globalThis.utility2_rollup_old\n    // || require(\"./assets.utility2.rollup.js\")\n    || globalThis.globalLocal\n);\n// init exports\nif (local.isBrowser) {\n    globalThis.utility2_electron = local;\n} else {\n    module.exports = local;\n    module.exports.__dirname = __dirname;\n}\n// init lib main\nlocal.electron = local;\n\n\n\n/* validateLineSortedReset */\nreturn;\n}());\n\n\n\n// run node js-env code - init-after\n/* istanbul ignore next */\n(function () {\n// run cli\nif (local.isBrowser || module !== require.main || process.versions.electron) {\n    return;\n}\n([\n    (\n        process.platform === \"darwin\"\n        && __dirname + \"/external/Atom.app/Contents/MacOS/Atom\"\n    ), (\n        process.platform === \"darwin\"\n        && __dirname + \"/external/Electron.app/Contents/MacOS/Electron\"\n    ),\n    __dirname + \"/external/electron\"\n]).some(function (file) {\n    if (file && local.fs.existsSync(file)) {\n        local.__filename = file;\n        return true;\n    }\n});\n// run electron in child_process\nlocal.child = local.child_process.spawn(\n    local.__filename,\n    process.argv.slice(2),\n    {stdio: [0, \"pipe\", 2]}\n);\nlocal.child.on(\"exit\", process.exit);\nlocal.child.stdout.on(\"data\", function (chunk, encoding, cb) {\n    // bug-workaround - force electron v1.8.x and higher to exit after running command\n    // --help|-h\n    switch (process.argv[2]) {\n    case \"--help\":\n    case \"-h\":\n        process.stdout.write(chunk, encoding, cb);\n        local.child.kill();\n        break;\n    default:\n        process.stdout.write(chunk, encoding, cb);\n    }\n});\n}());\n\n\n\n}());\n","/home/travis/build/kaizhu256/node-electron-lite/example.js":"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n/*\nexample.js\n\nthis electron script will screenshot the webpage https://electron.atom.io\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install electron-lite && \\\n            printf '{\"main\":\"example.js\",\"name\":\"undefined\",\"version\":\"0.0.1\"}' > \\\n            package.json && \\\n            ./node_modules/.bin/electron . --disable-overlay-scrollbar --enable-logging\n    3. view screenshot /tmp/screenshot.testExampleJs.browser..png\n*/\n\n\n\n/* istanbul instrument in package electron */\n/* jslint utility2:true */\n(function () {\n    \"use strict\";\n    var modeNext;\n    var onNext;\n    var options;\n    onNext = function (data) {\n        modeNext += 1;\n        switch (modeNext) {\n        case 1:\n            /* istanbul ignore next */\n            if (process.env.npm_config_mode_auto_restart) {\n                return;\n            }\n            // wait for electron to init\n            try {\n                require(\"app\").on(\"ready\", onNext);\n            } catch (ignore) {\n                require(\"electron\").app.once(\"ready\", onNext);\n            }\n            break;\n        case 2:\n            // init options\n            options = {frame: false, height: 768, width: 1024, x: 0, y: 0};\n            // init browserWindow;\n            try {\n                options.BrowserWindow = require(\"browser-window\");\n            } catch (ignore) {\n                options.BrowserWindow = require(\"electron\").BrowserWindow;\n            }\n            options.browserWindow = new options.BrowserWindow(options);\n            // goto next step when webpage is loaded\n            /* istanbul ignore next */\n            try {\n                options.browserWindow.webContents.once(\"did-stop-loading\", onNext);\n            } catch (ignore) {\n                setTimeout(onNext, 10000);\n            }\n            // open url\n            (options.browserWindow.loadUrl || options.browserWindow.loadURL).call(\n                options.browserWindow,\n                \"https://electron.atom.io\"\n            );\n            break;\n        case 3:\n            // screenshot webpage\n            options.browserWindow.capturePage(options, onNext);\n            break;\n        case 4:\n            // screenshot\n            /* istanbul ignore next */\n            try {\n                data = data.toPng();\n            } catch (ignore) {\n                data = data.toPNG();\n            }\n            require(\"fs\").writeFileSync(\"/tmp/screenshot.testExampleJs.browser..png\", data);\n            console.log(\"created screenshot file /tmp/screenshot.testExampleJs.browser..png\");\n            // exit\n            process.exit(0);\n            break;\n        }\n    };\n    modeNext = 0;\n    onNext();\n}());"}